.org 0x0    # 指示程从地址0x0开始
.set noat   # 允许自由使用寄存器$1
.global _start # 定义一个全局符号_start
_start:
    # 给寄存器 $1, $2, $3, $4 赋值
    lui $1, 0x0000      # $1 = 0x00000000
    lui $2, 0xffff      # $2 = 0xffff0000
    lui $3, 0x0505      # $3 = 0x05050000
    lui $4, 0x0000      # $4 = 0x00000000

    # 对于 movz 而言，由于寄存器 $1 为0，所以将 $2 的值赋值给 $4
    movz $4, $2, $1     # $4 = 0xffff0000

    # 对于 movn 而言，由于寄存器 $1 为0，所以不赋值，$4 的值保持不变
    movn $4, $3, $1     # $4 = 0xffff0000

    # 对于 movn 而言，由于寄存器 $2 不为0，所以将 $3 的值赋值给 $4
    movn $4, $3, $2     # $4 = 0x05050000

    # 对于 movz 而言，由于寄存器 $3 不为0，所以不赋值，$4 的值保持不变
    movz $4, $2, $3     # $4 = 0x05050000

    # 连续三条 mthi 指令，分别将寄存器 $0, $2, $3 的值保存到 HI 寄存器
    mthi $0             # hi = 0x00000000
    mthi $2             # hi = 0xffff0000
    mthi $3             # hi = 0x05050000

    # 读取 HI 寄存器的值到 $4, 同时可验证 HI、LO 寄存器带来的数据相关问题是否处理正确
    mfhi $4             # $4 = 0x05050000

    # 连续三条 mtlo 指令，分别将寄存器 $3, $2, $1 的值保存到 LO 寄存器
    mtlo $3             # lo = 0x05050000
    mtlo $2             # hi = 0xffff0000
    mtlo $1             # hi = 0x00000000

    # 读取 LO 寄存器的值到 $4, 同时可验证 HI、LO 寄存器带来的数据相关问题是否处理正确
    mflo $4             # $4 = 0x00000000